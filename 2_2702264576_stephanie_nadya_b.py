# -*- coding: utf-8 -*-
"""2_2702264576_Stephanie Nadya_B.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ePSrujMiGjNmeFyR0Nd7alFHSICyWV4u
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.preprocessing import OneHotEncoder
import matplotlib.pyplot as plt
import seaborn as sns

class ModelHandler:
    def __init__(self, df):
        self.df = df.copy()

        #Encode target column
        self.df.replace({"booking_status": {"Canceled": 0, "Not_Canceled": 1}}, inplace=True)

        #Drop Booking_ID
        self.df.drop('Booking_ID', axis=1, inplace=True)

        #Split data output input
        self.input_df = self.df.drop('booking_status', axis=1)
        self.output_df = self.df['booking_status']

        #Split data training dan testing
        self.x_train, self.x_test, self.y_train, self.y_test = train_test_split(self.input_df,
                                                                                self.output_df,
                                                                                test_size=0.2,
                                                                                random_state=0)

        self.encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)

    def preprocess(self):
        # Visualize numerical and categorical columns before encoding
        self._visualize_data()

        # Fill missing values
        self._fill_missing()

        # Encode categorical columns
        self._encode_columns()

    def _fill_missing(self):
        #Impute type_of_meal_plan dan required_car_parking_space dengan mode
        meal_mode = self.x_train['type_of_meal_plan'].mode()[0]
        parking_mode = self.x_train['required_car_parking_space'].mode()[0]

        for col, mode_val in [('type_of_meal_plan', meal_mode), ('required_car_parking_space', parking_mode)]:
            self.x_train[col].fillna(mode_val, inplace=True)
            self.x_test[col].fillna(mode_val, inplace=True)

        #Impute avg_price_per_room dengan median
        median_price = self.x_train['avg_price_per_room'].median()
        self.x_train['avg_price_per_room'].fillna(median_price, inplace=True)
        self.x_test['avg_price_per_room'].fillna(median_price, inplace=True)

    def _visualize_data(self):
        #Visualisasi boxplot utk kolom numerik
        num_cols = ['no_of_adults', 'no_of_children', 'no_of_weekend_nights',
                    'no_of_week_nights', 'lead_time', 'arrival_year',
                    'arrival_month', 'arrival_date', 'no_of_previous_cancellations',
                    'no_of_previous_bookings_not_canceled', 'avg_price_per_room',
                    'no_of_special_requests']

        plt.figure(figsize=(10, 30))
        for i, col in enumerate(num_cols, 1):
            plt.subplot(len(num_cols), 1, i)
            sns.boxplot(x=self.x_train[col], color='skyblue')
            plt.title(col)
        plt.tight_layout()
        plt.show()

        #Visualisasi barplot utk kolom kategorikal
        cat_cols = ['type_of_meal_plan', 'required_car_parking_space',
                    'room_type_reserved', 'market_segment_type', 'repeated_guest']

        plt.figure(figsize=(12, 10))
        for i, col in enumerate(cat_cols, 1):
            plt.subplot(3, 2, i)
            self.x_train[col].value_counts().plot(kind='bar', color='skyblue')
            plt.title(col)

        plt.tight_layout()
        plt.show()

    def _encode_columns(self):
        #Label encoding utk type_of_meal_plan dan room_type_reserved
        meal_map = {"Not Selected": 0, "Meal Plan 1": 1, "Meal Plan 2": 2, "Meal Plan 3": 3}
        room_map = {f"Room_Type {i}": i for i in range(1, 8)}

        self.x_train['type_of_meal_plan'] = self.x_train['type_of_meal_plan'].map(meal_map)
        self.x_test['type_of_meal_plan'] = self.x_test['type_of_meal_plan'].map(meal_map)

        self.x_train['room_type_reserved'] = self.x_train['room_type_reserved'].map(room_map)
        self.x_test['room_type_reserved'] = self.x_test['room_type_reserved'].map(room_map)

        #One-hot encoding utk 'market_segment_type'
        train_encoded = pd.DataFrame(self.encoder.fit_transform(self.x_train[['market_segment_type']]),
                                     columns=self.encoder.get_feature_names_out(),
                                     index=self.x_train.index)
        test_encoded = pd.DataFrame(self.encoder.transform(self.x_test[['market_segment_type']]),
                                    columns=self.encoder.get_feature_names_out(),
                                    index=self.x_test.index)

        self.x_train = pd.concat([self.x_train.drop('market_segment_type', axis=1), train_encoded], axis=1)
        self.x_test = pd.concat([self.x_test.drop('market_segment_type', axis=1), test_encoded], axis=1)

    def train_and_evaluate(self):
        self.model = RandomForestClassifier()
        self.model.fit(self.x_train, self.y_train)
        y_pred = self.model.predict(self.x_test)
        print('\nClassification Report for Random Forest\n')
        print(classification_report(self.y_test, y_pred, labels=[0, 1]))

    def save_model_to_file(self, filename):
        #Save trained model dengan pickle
        with open(filename, 'wb') as file:
            pickle.dump(self.model, file)
        print(f"Model saved to {filename}")

df = pd.read_csv("Dataset_B_hotel.csv")

handler = ModelHandler(df)

handler.preprocess()
handler.train_and_evaluate()

import pickle

handler.save_model_to_file('rf_model_oop.pkl')